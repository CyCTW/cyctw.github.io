"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[422],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(n),s=a,f=p["".concat(u,".").concat(s)]||p[s]||g[s]||i;return n?r.createElement(f,l(l({ref:t},m),{},{components:n})):r.createElement(f,l({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4030:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},l="C++ Algorithm library by examples",o={unversionedId:"ProgrammingLanguages/C++/Algorithm",id:"ProgrammingLanguages/C++/Algorithm",title:"C++ Algorithm library by examples",description:"- allof, anyof, none_of",source:"@site/docs/ProgrammingLanguages/C++/Algorithm.md",sourceDirName:"ProgrammingLanguages/C++",slug:"/ProgrammingLanguages/C++/Algorithm",permalink:"/ProgrammingLanguages/C++/Algorithm",draft:!1,editUrl:"https://github.com/CyCTW/cyctw.github.io/tree/master/docs/ProgrammingLanguages/C++/Algorithm.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"MongoDB Schema Design Pattern",permalink:"/Database\ud83d\uddc3/MongoDB/MongoPattern"},next:{title:"CRTP & \u975c\u614b\u591a\u578b",permalink:"/ProgrammingLanguages/C++/CRTP"}},u={},c=[],m={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-algorithm-library-by-examples"},"C++ Algorithm library by examples"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"all_of, any_of, none_of",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"E.g. Check if all value in vector is positive.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"vector<int> v{1, 2, 3};\nbool allPositive = all_of(begin(v), end(v), [](int x) { return x > 0; });\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"for_each, for_each_n",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"E.g. Iterate on value in vector, and can modify them.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"vector<int> v{1, 2, 3};\n// add 1 to every element\nfor_each(begin(v), end(v), [](int &x) { x++; });\nfor_each_n(begin(v), 3, [](int &x) { x++; });\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"count, count_if",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"E.g. Count positive value in vector.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"vector<int> v{1, 2, 3};\n\nint target = 3;\nint numOf3 = count(begin(v), end(v), target);\nint numOfPositive = count_if(begin(v), end(v), [](int x) {return x > 0; });\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"mismatch",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"E.g. Compare two vector, return first different value pair.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"vector<int> v1{1, 2, 3};\nvector<int> v2{1, 3, 3};\n// Return first non-identical iterators\nauto [it1, it2] = mismatch(begin(v1), end(v1), begin(v2));\n\nauto [it1, it2] = mismatch(begin(v1), end(v1), begin(v2), [](int x, int y) { return x == y; });\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"find, find_if, find_if_not",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"E.g. Find first non-positive value;")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"vector<int> v{1, 2, 3};\nauto it = find_if_not(begin(v), end(v), [](int x) { return x > 0; });\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"find_end",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"E.g.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"find_first_of")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"// Given a range and target array, find first element in range has element in target array\nfind_first_of(begin(v), end(v), )\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"search")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"// Find if some seq is in other seq\nconst std::boyer_moore_searcher searcher(begin(sub), end(sub));\nsearch(begin(target), end(target), searcher);\n")))}p.isMDXComponent=!0}}]);