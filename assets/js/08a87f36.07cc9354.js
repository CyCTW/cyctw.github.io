"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9672],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),c=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(u.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),f=r,k=m["".concat(u,".").concat(f)]||m[f]||s[f]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9004:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},l="Introduction",o={unversionedId:"ProgrammingLanguages/C++/EffectiveC++/Introduction",id:"ProgrammingLanguages/C++/EffectiveC++/Introduction",title:"Introduction",description:"- Purpose of the book: How to use c++ effectively.",source:"@site/docs/ProgrammingLanguages/C++/EffectiveC++/Introduction.md",sourceDirName:"ProgrammingLanguages/C++/EffectiveC++",slug:"/ProgrammingLanguages/C++/EffectiveC++/Introduction",permalink:"/ProgrammingLanguages/C++/EffectiveC++/Introduction",draft:!1,editUrl:"https://github.com/CyCTW/cyctw.github.io/tree/master/docs/ProgrammingLanguages/C++/EffectiveC++/Introduction.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Static binding v.s. Dynamic binding",permalink:"/ProgrammingLanguages/C++/DynamicPolymorphism"},next:{title:"Ch1",permalink:"/ProgrammingLanguages/C++/EffectiveC++/ch1"}},u={},c=[],p={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Purpose of the book: How to use c++ effectively."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"55 specific suggestions."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Advice two categories"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"General design strategies",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"How to choose different approaches to accomplish something in c++."),(0,r.kt)("li",{parentName:"ul"},"Inheritance & templates"),(0,r.kt)("li",{parentName:"ul"},"Private inheritance & composition"))),(0,r.kt)("li",{parentName:"ul"},"Nuts and bolts of specific language features",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When should a destructor be virtual?"),(0,r.kt)("li",{parentName:"ul"},"What happened when ",(0,r.kt)("inlineCode",{parentName:"li"},"new")," can't find enough memory."))),(0,r.kt)("li",{parentName:"ul"})))),(0,r.kt)("h2",{id:""}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Declaration",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Tell compiler about the name and type of something, omit details. "))),(0,r.kt)("li",{parentName:"ul"},"Definition",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Provide compiler the details a declaration omits."))),(0,r.kt)("li",{parentName:"ul"},"Initialization   ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Give object its first value."),(0,r.kt)("li",{parentName:"ul"},"Constructor",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Default constructor: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"constructor can be called without parameters."),(0,r.kt)("li",{parentName:"ul"},"Either has no parameters or has default value for every parameters."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"explicit")," constructor",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Prevents them from being used to perform implicit type conversions by compilers.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"E.g. implicit convert from ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," to class ",(0,r.kt)("inlineCode",{parentName:"li"},"B"),". ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"B abc = 3")," cause implicit conversion."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"class B { B(int x=3) }")))))),(0,r.kt)("li",{parentName:"ul"},"Preferable pattern."))))),(0,r.kt)("li",{parentName:"ul"},"Copy constructor",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Initialize an object with a different object of same type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Widget w3 = w2")," is also a copy."),(0,r.kt)("li",{parentName:"ul"},"When function pass by value, copy constructor is called."))),(0,r.kt)("li",{parentName:"ul"},"c.f. Copy assignment",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"copy value from one object to another existing object with same type."),(0,r.kt)("li",{parentName:"ul"},"Difference is whether it's a initialization."))))),(0,r.kt)("li",{parentName:"ul"},"function objects",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"objects that act like functions."),(0,r.kt)("li",{parentName:"ul"},"a.k.a functor"))),(0,r.kt)("li",{parentName:"ul"},"Undefined behavior",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Behaviors of some constructs in C++ is undefined behavior."),(0,r.kt)("li",{parentName:"ul"},"Can't predict what happened at runtime."),(0,r.kt)("li",{parentName:"ul"},"E.g. dereference null pointer, invalid arr index."))),(0,r.kt)("li",{parentName:"ul"},"client",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"someone or something that use the code you write.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Maybe code or developer that write client code."))),(0,r.kt)("li",{parentName:"ul"})))))}m.isMDXComponent=!0}}]);