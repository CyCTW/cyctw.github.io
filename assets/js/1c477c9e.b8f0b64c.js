"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1246],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var l=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,l,i=function(e,t){if(null==e)return{};var a,l,i={},n=Object.keys(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=l.createContext({}),u=function(e){var t=l.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=u(e.components);return l.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=u(a),d=i,k=p["".concat(s,".").concat(d)]||p[d]||c[d]||n;return a?l.createElement(k,r(r({ref:t},m),{},{components:a})):l.createElement(k,r({ref:t},m))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,r=new Array(n);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var u=2;u<n;u++)r[u]=a[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},207:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var l=a(7462),i=(a(7294),a(3905));const n={},r="Ch1 Reliable, Scalable, and Maintainable Applications",o={unversionedId:"SystemDesign/DDIA-notes/ch1",id:"SystemDesign/DDIA-notes/ch1",title:"Ch1 Reliable, Scalable, and Maintainable Applications",description:"- Data-intensive v.s compute intensive",source:"@site/docs/SystemDesign/DDIA-notes/ch1.md",sourceDirName:"SystemDesign/DDIA-notes",slug:"/SystemDesign/DDIA-notes/ch1",permalink:"/SystemDesign/DDIA-notes/ch1",draft:!1,editUrl:"https://github.com/CyCTW/cyctw.github.io/tree/master/docs/SystemDesign/DDIA-notes/ch1.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"DDIA Notes",permalink:"/category/ddia-notes"}},s={},u=[{value:"Standard building block of an application",id:"standard-building-block-of-an-application",level:2},{value:"About these building blocks",id:"about-these-building-blocks",level:3},{value:"Thinking About data systems",id:"thinking-about-data-systems",level:2},{value:"Reliability",id:"reliability",level:2},{value:"Hardware Faults",id:"hardware-faults",level:3},{value:"Software Faults",id:"software-faults",level:3},{value:"Human errors (similar to software faults)",id:"human-errors-similar-to-software-faults",level:3},{value:"Scalability",id:"scalability",level:2},{value:"Describing Load",id:"describing-load",level:3},{value:"Describing performance",id:"describing-performance",level:3},{value:"Approachs for coping with load",id:"approachs-for-coping-with-load",level:3},{value:"Maintainbility",id:"maintainbility",level:2},{value:"Operability",id:"operability",level:3},{value:"Simplicity: Manage complexity",id:"simplicity-manage-complexity",level:3},{value:"Evolability: Make change easy",id:"evolability-make-change-easy",level:3},{value:"Summary",id:"summary",level:2}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,l.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ch1-reliable-scalable-and-maintainable-applications"},"Ch1 Reliable, Scalable, and Maintainable Applications"),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Data-intensive v.s compute intensive",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Most application are data-intensive, cpu power is not a limiting factor"),(0,i.kt)("li",{parentName:"ul"},"Most problems: amount of data, complexity of data."),(0,i.kt)("li",{parentName:"ul"},"Supplementary:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Single-threaded web server (NodeJS) v.s. multi-threaded web server (Golang)")))))),(0,i.kt)("h2",{id:"standard-building-block-of-an-application"},"Standard building block of an application"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Store data persistently. (Database)"),(0,i.kt)("li",{parentName:"ul"},"Remember result of expensive operation. (Cache)"),(0,i.kt)("li",{parentName:"ul"},"Search data by keywords. (Search indexes)"),(0,i.kt)("li",{parentName:"ul"},"I",(0,i.kt)("strong",{parentName:"li"},"ngesting a continuous data stream to quickly analyze, filter, transform or enhance the data in real time"),"(Stream processing)"),(0,i.kt)("li",{parentName:"ul"},"Periodically process large amount of data (Batch processing)")),(0,i.kt)("h3",{id:"about-these-building-blocks"},"About these building blocks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"These data system are successful abstraction.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g. Developer doesn\u2019t need to write a new database from scratch."))),(0,i.kt)("li",{parentName:"ul"},"Same category of data system may have many different characteristics",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g. Many different implementation of Database, Various approach to caching."))),(0,i.kt)("li",{parentName:"ul"},"Figure out which tools and which approaches are the most appropriate for our app.")),(0,i.kt)("h2",{id:"thinking-about-data-systems"},"Thinking About data systems"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The traditional categories becomes blur",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g. Redis can be a datastore, and also used as message queues."))),(0,i.kt)("li",{parentName:"ul"},"A single tool can no longer meet all needs.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"E.g. Cache, full-text search, and database")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It\u2019s the application\u2019s responsibility to sync data within these componenets."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"- Now, you\u2019re both an application developer and a data system designer.\n")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Untitled",src:a(8870).Z,width:"1127",height:"812"}))))),(0,i.kt)("li",{parentName:"ul"},"How to ensure the whole data system work correctly?",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"How to ensure data remain correct and complete when something go wrong?"),(0,i.kt)("li",{parentName:"ul"},"How to provide consistently good performance to clients when some part of system degrade?"),(0,i.kt)("li",{parentName:"ul"},"How to scale when increase in load?"))),(0,i.kt)("li",{parentName:"ul"},"Focus on three important concerns in most software systems",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Reliability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"System continue to work correctly even when fault occurs.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fault included: Hardware, software faults, human error."))))),(0,i.kt)("li",{parentName:"ul"},"Scalability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ways to handle when the system grows in data or traffic volume."))),(0,i.kt)("li",{parentName:"ul"},"Maintainability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"People should be able to work on it productively.")))))))),(0,i.kt)("h2",{id:"reliability"},"Reliability"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Roughly meaning: \u201cContinuing to work correctly, even when things go wrong\u201d"),(0,i.kt)("li",{parentName:"ul"},"faults:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"One component of the system deviating from its spec."),(0,i.kt)("li",{parentName:"ul"},"c.f. failures: The whole system stop providing service."))),(0,i.kt)("li",{parentName:"ul"},"System that anticipate faults and can cope with them are call fault-tolerant or resilient"),(0,i.kt)("li",{parentName:"ul"},"How to test a system is fault-tolerant?",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Deliberately generate faults."),(0,i.kt)("li",{parentName:"ul"},"E.g. Netflix Chaos Monkey: randomly kill instance and see whether service works fine.")))),(0,i.kt)("h3",{id:"hardware-faults"},"Hardware Faults"),(0,i.kt)("p",null,"Examples: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Hard disk crash, power blackout, someone unplug network cable, etc."),(0,i.kt)("li",{parentName:"ul"},"Hard disk\u2019s Mean time to Failure (MTTF)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"10~50 year."))),(0,i.kt)("li",{parentName:"ul"},"First solution: Add redundancy in component",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Set up disk in a RAID configuration."),(0,i.kt)("li",{parentName:"ul"},"Dual power supplies for server."),(0,i.kt)("li",{parentName:"ul"},"Idea: When one component die, the redundant component can take its place."),(0,i.kt)("li",{parentName:"ul"},"Result:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Make total failure of a single machine rare."),(0,i.kt)("li",{parentName:"ul"},"Multi-machine redundant is not necessary."))))),(0,i.kt)("li",{parentName:"ul"},"Trends:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"As data volume and application\u2019s computing increased, more app use larger number of machines."),(0,i.kt)("li",{parentName:"ul"},"It\u2019s common that vm provided with cloud provider become unavailable without warning.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Platform is designed to prioritize flexibility and elastic over single-machinie reliability."))))),(0,i.kt)("li",{parentName:"ul"},"Second solution: Using software fault-tolerance technique in preference",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"System should tolerate the single-machine shutdown."),(0,i.kt)("li",{parentName:"ul"},"Advantages:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Can perform rolling upgrade:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Reboot a machine to security patch, one node at a time, while other machine can still maintain the service without downtime.")))))))),(0,i.kt)("h3",{id:"software-faults"},"Software Faults"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Hardware faults are random and independent."),(0,i.kt)("li",{parentName:"ul"},"Software faults(Systematic faults) are harder to anticipate, and may have relation between faults."),(0,i.kt)("li",{parentName:"ul"},"Examples:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Given a bad input cause the whole system crash"),(0,i.kt)("li",{parentName:"ul"},"A process that exhaust all CPU, memory resource."))),(0,i.kt)("li",{parentName:"ul"},"Solutions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Carefully thinking about assumption and interaction in the system.")))),(0,i.kt)("h3",{id:"human-errors-similar-to-software-faults"},"Human errors (similar to software faults)"),(0,i.kt)("p",null,"How to build reliable system without human errors:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Design system that minimize opportunities of errors",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g. Well-designed abstraction"))),(0,i.kt)("li",{parentName:"ul"},"Testing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"From unit test to end-to-end test, use automated test."))),(0,i.kt)("li",{parentName:"ul"},"Allow quick and easy recovery from human errors",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fast to rollback and gradually roll out new code."))),(0,i.kt)("li",{parentName:"ul"},"Set up detailed monitoring and alerting.")),(0,i.kt)("h2",{id:"scalability"},"Scalability"),(0,i.kt)("h3",{id:"describing-load"},"Describing Load"),(0,i.kt)("p",null,"Succintly describe current load of system."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load can be described with a few number called load parameters."),(0,i.kt)("li",{parentName:"ul"},"Load parameters including:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"rps, r/w ratios, cache hit rate, etc."),(0,i.kt)("li",{parentName:"ul"},"Observe the average and extreme cases."))),(0,i.kt)("li",{parentName:"ul"},"Example: Tweet",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Two API",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"User post tweet"),(0,i.kt)("li",{parentName:"ul"},"Browse home timeline (should see the followees\u2019 posts)"))),(0,i.kt)("li",{parentName:"ul"},"Two different ways to handle",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Method 1",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"User post tweet: Directly write into database. (fast)"),(0,i.kt)("li",{parentName:"ul"},"Browse Timeline: Perform join on database for all followees\u2019 post. (slow)"))),(0,i.kt)("li",{parentName:"ol"},"Method 2",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"User post tweet: Write post to all follower\u2019s individual cache. (slow, many write)"),(0,i.kt)("li",{parentName:"ul"},"Browse Timeline: Directly fetch from cache. (fast)")))))))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Untitled",src:a(7156).Z,width:"851",height:"727"})),(0,i.kt)("hr",null),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Initially, Twitter use method 1, but system load home timeline slowly.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We can found that home timeline query is more frequent than post tweet."),(0,i.kt)("li",{parentName:"ul"},"Hence, it consider method 2."))),(0,i.kt)("li",{parentName:"ul"},"For method 2, posting tweet may cost lots of time.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Firstly, we observe the average followers of each user is 75. So the write cost should * 75."),(0,i.kt)("li",{parentName:"ul"},"However, we omit the fact that some celebrity have extreme high followers(30 million), which can cause high write suddenly."))),(0,i.kt)("li",{parentName:"ul"},"For twitter, the distribution of followers per user is the key load parameter."),(0,i.kt)("li",{parentName:"ul"},"Finally, twitter use a hybrid approach.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For normal user, use method 2."),(0,i.kt)("li",{parentName:"ul"},"For specific celebrity, use method 1."),(0,i.kt)("li",{parentName:"ul"},"When browsing timeline, merge the local cache and the join result from db."),(0,i.kt)("li",{parentName:"ul"},"Ref: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/twitter/README.md"},"https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/twitter/README.md"))))),(0,i.kt)("h3",{id:"describing-performance"},"Describing performance"),(0,i.kt)("p",null,"In online system, service\u2019s response time is more important to describe performance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Response time: The time between client send request and receive response."),(0,i.kt)("li",{parentName:"ul"},"Every try may have different response time."),(0,i.kt)("li",{parentName:"ul"},"Measure as distribution.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Untitled",src:a(7856).Z,width:"1132",height:"410"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We should take care of outliers seriously.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Perhaps the slowest request is from a more valuable customer because they usually have more data to load."))),(0,i.kt)("li",{parentName:"ul"},"Use percentile instead of average to tell how many customer actually experienced delay easily.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g. p50: median percentile, p90, p99"),(0,i.kt)("li",{parentName:"ul"},"Amazon describe performance in terms of p99.9."))),(0,i.kt)("li",{parentName:"ul"},"Head-of-line blocking",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Server is blocked at a slow request and can\u2019t handle subsequent request."),(0,i.kt)("li",{parentName:"ul"},"Even if subsequent request is fast to process, client still feel high response time."))),(0,i.kt)("li",{parentName:"ul"},"Tail-latency amplification",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When an incoming request need to call other backend services, the slowest request is the bottleneck.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The probability for client to meet slow request is higher."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Untitled",src:a(4226).Z,width:"1117",height:"602"})))))),(0,i.kt)("h3",{id:"approachs-for-coping-with-load"},"Approachs for coping with load"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Scale up (vertical scaling)"),(0,i.kt)("li",{parentName:"ul"},"Scale out (horizontal scaling)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Scale out is cheaper than scale up."),(0,i.kt)("li",{parentName:"ul"},"Elastic",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Automatic scaling by observing some metric."))),(0,i.kt)("li",{parentName:"ul"},"Stateless v.s. Stateful",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Stateful: Take Stateful data system from one node to a distributed setup introduce lots of complexity."),(0,i.kt)("li",{parentName:"ul"},"Stateless: Share-nothing architecture.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Distribute load across multiple machine. (stateless)"))))))),(0,i.kt)("li",{parentName:"ul"},"There is no one-size fit all scalable architecture",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Scaling is highly specific to application."),(0,i.kt)("li",{parentName:"ul"},"Different problem. E.g. r/w volume, data volume, etc."))),(0,i.kt)("li",{parentName:"ul"},"Determine which operations are common and which operations are rare.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Decide important load parameter.")))),(0,i.kt)("h2",{id:"maintainbility"},"Maintainbility"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Majority cost of software is the ",(0,i.kt)("strong",{parentName:"li"},"ongoing maintenance"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g. fix bugs, keep system operational, investigating failures, pay tech debt, etc."))),(0,i.kt)("li",{parentName:"ul"},"We should design software in a way that minimize pain during maintenance and avoid legacy software ourselves."),(0,i.kt)("li",{parentName:"ul"},"Three design principles for softwrae systems:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Operability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Make it easy for Op teams to keep system running."))),(0,i.kt)("li",{parentName:"ul"},"Simplicity",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Make it easy for new engineer to understand the system by removing complexity."))),(0,i.kt)("li",{parentName:"ul"},"Evolvability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Make it easy for engineer to make changes to the system in the future."),(0,i.kt)("li",{parentName:"ul"},"A.k.a extensibility, modifiability, plasticity.")))))),(0,i.kt)("h3",{id:"operability"},"Operability"),(0,i.kt)("p",null,"Operation teams are vital to keeping a software running smoothly."),(0,i.kt)("p",null,"Responsibility:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Monitoring the health of system, and quickly restoring service if it\u2019s shutdown."),(0,i.kt)("li",{parentName:"ul"},"Tracking down the cause of problem.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Logging"))),(0,i.kt)("li",{parentName:"ul"},"Keeping softeware and platforms up to date, including security patches."),(0,i.kt)("li",{parentName:"ul"},"Establishing good practice and tools for deployment, configuration management and more.")),(0,i.kt)("hr",null),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Good operability means making routine tasks easy."),(0,i.kt)("li",{parentName:"ul"},"Data systems can do various things to make routine tasks easy:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Visibility into the runtime behavior of the system"),(0,i.kt)("li",{parentName:"ul"},"Good support for automation and integration with tools."),(0,i.kt)("li",{parentName:"ul"},"Provide Documentation."),(0,i.kt)("li",{parentName:"ul"},"Rolling upgrade"),(0,i.kt)("li",{parentName:"ul"},"Self-healing")))),(0,i.kt)("h3",{id:"simplicity-manage-complexity"},"Simplicity: Manage complexity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Possible symptons of complexity:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Extra state space"),(0,i.kt)("li",{parentName:"ul"},"Tight coupling of modules"),(0,i.kt)("li",{parentName:"ul"},"Tangled dependency (cyclic dependency ?)"),(0,i.kt)("li",{parentName:"ul"},"inconsistent naming."),(0,i.kt)("li",{parentName:"ul"},"Special-case to workaround issue."))),(0,i.kt)("li",{parentName:"ul"},"Complexity system drawbacks",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Greater risk of introducing bug when making a change because",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"system is harder to understand"),(0,i.kt)("li",{parentName:"ul"},"hidden assumption"))))),(0,i.kt)("li",{parentName:"ul"},"Tools for remove unnecessary complexity: Abstraction",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Hide implementation detail behind a clean, understandable interface."),(0,i.kt)("li",{parentName:"ul"},"easy to use for other applications."))),(0,i.kt)("li",{parentName:"ul"},"E.g. SQL is an abstraction that hide complex on-disk and in-memory data structure, concurrent requests from other clients (Still need to consider), and inconsistent after crash.")),(0,i.kt)("h3",{id:"evolability-make-change-easy"},"Evolability: Make change easy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Agile development: Adpating to change easily.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"TDD (Test-driven design)"),(0,i.kt)("li",{parentName:"ul"},"Refactoring.")))),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reliability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"System continue to work correctly even when fault occurs.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fault included: Hardware, software faults, human error."))))),(0,i.kt)("li",{parentName:"ul"},"Scalability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ways to handle when the system grows in data or traffic volume."))),(0,i.kt)("li",{parentName:"ul"},"Maintainability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"People should be able to work on it productively.")))))}p.isMDXComponent=!0},8870:(e,t,a)=>{a.d(t,{Z:()=>l});const l=a.p+"assets/images/Untitled-8d45eaece4b60208486c6f3a6df2c113.png"},7156:(e,t,a)=>{a.d(t,{Z:()=>l});const l=a.p+"assets/images/Untitled1-f92519dec22cda27ff52a22a4ead122c.png"},7856:(e,t,a)=>{a.d(t,{Z:()=>l});const l=a.p+"assets/images/Untitled2-29a65cf6a108b41c8f863f4485588835.png"},4226:(e,t,a)=>{a.d(t,{Z:()=>l});const l=a.p+"assets/images/Untitled3-0b285736adfe407023733054dc05dbdb.png"}}]);